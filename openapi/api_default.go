/*
Adder API

Adder API

API version: v1
Contact: support@blinklabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type DefaultAPI interface {

	/*
		FcmPost Store FCM Token

		Store a new FCM token

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPIFcmPostRequest
	*/
	FcmPost(ctx context.Context) DefaultAPIFcmPostRequest

	// FcmPostExecute executes the request
	//  @return string
	FcmPostExecute(r DefaultAPIFcmPostRequest) (string, *http.Response, error)

	/*
		FcmTokenDelete Delete FCM Token

		Delete an FCM token by its value

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param token FCM Token
		@return DefaultAPIFcmTokenDeleteRequest
	*/
	FcmTokenDelete(
		ctx context.Context,
		token string,
	) DefaultAPIFcmTokenDeleteRequest

	// FcmTokenDeleteExecute executes the request
	//  @return string
	FcmTokenDeleteExecute(
		r DefaultAPIFcmTokenDeleteRequest,
	) (string, *http.Response, error)

	/*
		FcmTokenGet Get FCM Token

		Get an FCM token by its value

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param token FCM Token
		@return DefaultAPIFcmTokenGetRequest
	*/
	FcmTokenGet(ctx context.Context, token string) DefaultAPIFcmTokenGetRequest

	// FcmTokenGetExecute executes the request
	//  @return PushTokenResponse
	FcmTokenGetExecute(
		r DefaultAPIFcmTokenGetRequest,
	) (*PushTokenResponse, *http.Response, error)
}

// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type DefaultAPIFcmPostRequest struct {
	ctx        context.Context
	ApiService DefaultAPI
	body       *PushTokenRequest
}

// FCM Token Request
func (r DefaultAPIFcmPostRequest) Body(
	body PushTokenRequest,
) DefaultAPIFcmPostRequest {
	r.body = &body
	return r
}

func (r DefaultAPIFcmPostRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.FcmPostExecute(r)
}

/*
FcmPost Store FCM Token

Store a new FCM token

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIFcmPostRequest
*/
func (a *DefaultAPIService) FcmPost(
	ctx context.Context,
) DefaultAPIFcmPostRequest {
	return DefaultAPIFcmPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return string
func (a *DefaultAPIService) FcmPostExecute(
	r DefaultAPIFcmPostRequest,
) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(
		r.ctx,
		"DefaultAPIService.FcmPost",
	)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{
			error: err.Error(),
		}
	}

	localVarPath := localBasePath + "/fcm"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError(
			"body is required and must be specified",
		)
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(
		r.ctx,
		localVarPath,
		localVarHTTPMethod,
		localVarPostBody,
		localVarHeaderParams,
		localVarQueryParams,
		localVarFormParams,
		formFiles,
	)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v PushErrorResponse
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(
		&localVarReturnValue,
		localVarBody,
		localVarHTTPResponse.Header.Get("Content-Type"),
	)
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIFcmTokenDeleteRequest struct {
	ctx        context.Context
	ApiService DefaultAPI
	token      string
}

func (r DefaultAPIFcmTokenDeleteRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.FcmTokenDeleteExecute(r)
}

/*
FcmTokenDelete Delete FCM Token

Delete an FCM token by its value

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param token FCM Token
	@return DefaultAPIFcmTokenDeleteRequest
*/
func (a *DefaultAPIService) FcmTokenDelete(
	ctx context.Context,
	token string,
) DefaultAPIFcmTokenDeleteRequest {
	return DefaultAPIFcmTokenDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		token:      token,
	}
}

// Execute executes the request
//
//	@return string
func (a *DefaultAPIService) FcmTokenDeleteExecute(
	r DefaultAPIFcmTokenDeleteRequest,
) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(
		r.ctx,
		"DefaultAPIService.FcmTokenDelete",
	)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{
			error: err.Error(),
		}
	}

	localVarPath := localBasePath + "/fcm/{token}"
	localVarPath = strings.Replace(
		localVarPath,
		"{"+"token"+"}",
		url.PathEscape(parameterValueToString(r.token, "token")),
		-1,
	)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(
		r.ctx,
		localVarPath,
		localVarHTTPMethod,
		localVarPostBody,
		localVarHeaderParams,
		localVarQueryParams,
		localVarFormParams,
		formFiles,
	)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v PushErrorResponse
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(
		&localVarReturnValue,
		localVarBody,
		localVarHTTPResponse.Header.Get("Content-Type"),
	)
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultAPIFcmTokenGetRequest struct {
	ctx        context.Context
	ApiService DefaultAPI
	token      string
}

func (r DefaultAPIFcmTokenGetRequest) Execute() (*PushTokenResponse, *http.Response, error) {
	return r.ApiService.FcmTokenGetExecute(r)
}

/*
FcmTokenGet Get FCM Token

Get an FCM token by its value

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param token FCM Token
	@return DefaultAPIFcmTokenGetRequest
*/
func (a *DefaultAPIService) FcmTokenGet(
	ctx context.Context,
	token string,
) DefaultAPIFcmTokenGetRequest {
	return DefaultAPIFcmTokenGetRequest{
		ApiService: a,
		ctx:        ctx,
		token:      token,
	}
}

// Execute executes the request
//
//	@return PushTokenResponse
func (a *DefaultAPIService) FcmTokenGetExecute(
	r DefaultAPIFcmTokenGetRequest,
) (*PushTokenResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PushTokenResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(
		r.ctx,
		"DefaultAPIService.FcmTokenGet",
	)
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{
			error: err.Error(),
		}
	}

	localVarPath := localBasePath + "/fcm/{token}"
	localVarPath = strings.Replace(
		localVarPath,
		"{"+"token"+"}",
		url.PathEscape(parameterValueToString(r.token, "token")),
		-1,
	)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(
		r.ctx,
		localVarPath,
		localVarHTTPMethod,
		localVarPostBody,
		localVarHeaderParams,
		localVarQueryParams,
		localVarFormParams,
		formFiles,
	)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v PushErrorResponse
			err = a.client.decode(
				&v,
				localVarBody,
				localVarHTTPResponse.Header.Get("Content-Type"),
			)
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(
		&localVarReturnValue,
		localVarBody,
		localVarHTTPResponse.Header.Get("Content-Type"),
	)
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
